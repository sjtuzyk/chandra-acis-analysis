#!/usr/bin/env python3
#Author: Zhu Yong-kai (yongkai_zhu@hotmail.com)

import argparse
import logging
import os
import datetime

from renorm_spectrum import renorm_spectrum
from _context import acispy
from acispy.results import get_results
from acispy.manifest import get_manifest
from acispy.ciao import setup_pfiles
from acispy.ciao import run_command


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def true2yes(p):
    if isinstance(p, bool):
        if p == True:
            p = "yes"
        elif p == False:
            p = "no"
        else:
            raise ValueError("The value of %s you input is incorrect!" % p)
    if isinstance(p, list):
        print(p)
        for i, j in enumerate(p):
            if j == True:
                j = "yes"
            elif j == False:
                j = "no"
            else:
                raise ValueError("The value of %s you input is incorrect!" % j)
            p[i] = j
    return p


def extract_lbkg_spec(infile, outroot, lbkg_reg, aspfile,
        mskfile, badpixfile, energy="0.3:11.0:0.01", channel="1:1024:1",
        correctpsf=False,
        weight=True,
        weight_rmf=True,
        clobber=False):
    """
    extract background spectrum with grouptype=None.
    """
    correctpsf, weight, weight_rmf, clobber = true2yes(
            [correctpsf, weight, weight_rmf, clobber])
    tool = "specextract"
    bkgfile = ""
    infile = "infile=%s[sky=region(%s)]" % (infile, lbkg_reg)
    outroot = "outroot=%s" % outroot
    bkgfile = "bkgfile=%s" % bkgfile
    asp = "asp=%s" % aspfile
    mskfile = "mskfile=%s" % mskfile
    badpixfile = "badpixfile=%s" % badpixfile
    correctpsf = "correctpsf=%s" % correctpsf
    weight = "weight=%s" % weight
    weight_rmf = "weight_rmf=%s" % weight_rmf
    energy = "energy=%s" % energy
    channel = "channel=%s" % channel
    bkgresp = "bkgresp=no"
    combine = "combine=no"
    binarfwmap = "binarfwmap=2"
    grouptype = "grouptype=NONE"
    clobber = "clobber=%s" % clobber
    binspec = "binspec=NONE"
    verbose = "verbose=2"
    args = [infile, outroot, bkgfile, asp, mskfile, badpixfile,
            correctpsf, weight, weight_rmf, energy, channel,
            bkgresp, combine, binarfwmap, grouptype, binspec,
            clobber, verbose]
    run_command(tool, args)
    logger.info("generate local background spectrum: %s" % (outroot+".pi"))
    logger.info("generate RMF file: %s" % (outroot+".rmf"))
    logger.info("generate ARF file: %s" % (outroot+".arf"))


def extract_blanksky_spec(infile, outfile, region, clobber=False):
    """
    Generate the blanksky bkg spectrum
    infile is blanksky event file
    region is the local background region you choose to generate
    the blanksky bkg spectrum.
    """
    logger.info("Extract blanksky spectrum: %s" % outfile)
    tool = "dmextract"
    infile = "infile=%s[sky=region(%s)][bin pi]" % (infile, region)
    outfile = "outfile=%s" % outfile
    wmap = "wmap=[bin det=8]"
    clobber = "clobber=%s" % true2yes(clobber)
    args = [infile, outfile, wmap, clobber]
    run_command(tool, args)


def group_spec(infile, outfile, grouptype="NUM_CTS", grouptypeval="20",
        binspec="1:128:2,129:256:4,257:512:8,513:1024:16", clobber=False):
    """
    Note: infile is the local background file produced by extract_lbkg_spec,
    and outfile is the grouped background spectrum.
    """
    tool = "dmgroup"
    if grouptype == "NUM_CTS" or grouptype == "BIN":
        grouptypeval = "grouptypeval=%s" % grouptypeval
    else:
        raise ValueError("given grouptype %s invalid\n" % grouptype)
    infile = "infile=%s" % infile
    outfile = "outfile=%s" % outfile
    grouptype = "grouptype=%s" % grouptype
    binspec = "binspec=%s" % binspec
    xcolumn = "xcolumn=CHANNEL"
    ycolumn = "ycolumn=COUNTS"
    clobber = "clobber=%s" % true2yes(clobber)
    args = [infile, outfile, grouptype, grouptypeval, binspec, xcolumn,
            ycolumn, clobber]
    run_command(tool, args)


def generate_xcm(outroot, lbkg_grp_pi, bbkg_pi,
        nh, z):
    """
    generate the xcm file for the analysis of xspec
    """
    lbkg_rmf = outroot + ".rmf"
    lbkg_arf = outroot + ".arf"
    filename = "xspec_" + outroot + "_model.xcm"
    f = open(filename, "w")
    print(
"## xspec script\n\
## analysis chandra acis background components\n\
## xspec model: apec+apec+wabs*(pow+apec)\n\
##\n\
## generated by ciao_bkg_spectra.py\n\
## %s\n\
## NOTES: needs XSPEC v12.x\n\
# settings\n\
statistic chi\n\
#weight churazov\n\
abund grsa\n\
query yes\n\
\n\
\n\
# data\n" % (str(datetime.datetime.now())), file=f)
    print("data %s\n\
response %s\n\
arf %s\n\
backgrnd %s\n\
\n\
\n" % (lbkg_grp_pi, lbkg_rmf, lbkg_arf, bbkg_pi), file=f)
    print("# fitting range\n\
ignore bad\n\
ignore 0.0-0.4,8.0-**\n\
# plot related\n\
setplot energy\n\
\n\
method leven 10 0.01\n\
xsect bcmc\n\
cosmo 70 0 0.73\n\
xset delta 0.01\n\
systematic 0\n\
# model\n\
model  apec + apec + wabs(powerlaw + apec)\n\
0.08      -0.01      0.008      0.008         64         64\n\
1     -0.001          0          0          5          5\n\
0      -0.01     -0.999     -0.999         10         10\n\
0.0       0.01         -1          0          0          1\n\
0.2      -0.01      0.008      0.008         64         64\n\
1     -0.001          0          0          5          5\n\
0      -0.01     -0.999     -0.999         10         10\n\
0.0       0.01         -1          0          0          1\n\
%s     -0.001          0          0     100000      1e+06\n\
1.4      -0.01         -3         -2          9         10\n\
0.0       0.01         -1          0          0          1\n\
1.0       0.01      0.008      0.008         64         64\n\
0.4      0.001          0          0          5          5\n\
%s      -0.01     -0.999     -0.999         10         10\n\
0.0       0.01          0          0      1e+24      1e+24\n\
" % (nh, z), file=f)
    print("freeze 1 2 3\n\
freeze 5 6 7\n\
freeze 9 10 14\n\
thaw 12 13\n\
", file=f)
    f.close()



def main():
    parser = argparse.ArgumentParser(
        description="Calculate the spectral regions")
    parser.add_argument("-C", "--clobber", dest="clobber",
            action="store_true",
            help="overwrite existing file")
    parser.add_argument("-nh", "--nh", dest="nh",
            help="input nh")
    parser.add_argument("-z", "--redshift", dest="redshift",
            help="input redshift")
    parser.add_argument("-r", "--reg_bkg", dest="reg_bkg",
            help="input background region")


    args = parser.parse_args()

    setup_pfiles(["dmgroup", "dmextract", "specextract"])

    manifest = get_manifest()
    results = get_results()
    if args.nh:
        nh = args.nh
    else:
        nh = results.get("nh")
    if args.redshift:
        z = args.redshift
    else:
        z = results.get("z")
    if args.reg_bkg:
        reg_bkg = args.reg_bkg
    else:
        reg_bkg = manifest.getpath("reg_bkg", relative=True)

    evtfile = manifest.getpath("evt2_clean", relative=True)
    bkg_blank = manifest.getpath("bkg_blank", relative=True)
    aspfile = manifest.getpath("asol", relative=True)
    bpixfile = manifest.getpath("bpix", relative=True)
    mskfile = manifest.getpath("msk", relative=True)

    outroot = os.path.splitext(os.path.split(reg_bkg)[1])[0]
    extract_lbkg_spec(infile=evtfile, outroot=outroot, lbkg_reg=reg_bkg,
            aspfile=aspfile, badpixfile=bpixfile, mskfile=mskfile,
            clobber=args.clobber)
    lbkg_pi = outroot + ".pi"
    bbkg_pi = "blanksky_" + outroot + ".pi"
    extract_blanksky_spec(infile=bkg_blank, outfile=bbkg_pi,
            region=reg_bkg, clobber=args.clobber)
    renorm_spectrum(lbkg_pi, bbkg_pi)
    lbkg_grp_pi = outroot + "_grp.pi"
    group_spec(infile=lbkg_pi, outfile=lbkg_grp_pi, clobber=args.clobber)
    generate_xcm(outroot, lbkg_grp_pi=lbkg_grp_pi, bbkg_pi=bbkg_pi,
            nh=nh, z=z)



if __name__ == "__main__":
    main()

